type Query {
  hello(name: String): String!
  allRecipe(filter: String): SearchResult!
  allIngredient(filter: String): [Ingredient!]!
  recipeById(id: ID!): QueryResult!
  logIn(input: UserInput): User
}

type Mutation {
  newRecipe(input: RecipeInput): ID
  updateRecipe(id: ID, input: RecipeInput): Recipe!
  deleteRecipe(id: ID): String!
  createNewUser(input: UserInput): User
}

input RecipeInput {
  name: String!
  description: String
  instructions: [String!]!
  ingredients: [IngredientInput!]!
}

input IngredientInput {
  name: String!
  quantity: Int!
  unit: String
}

input UserInput {
  username: String!
  token: String!
}

type SearchResult {
  recipes: [Recipe!]!
  count: Int!
}

type ErrorResult {
  code: String!
  message: String
}

union QueryResult = Recipe | ErrorResult

type Recipe {
  id: ID!
  name: String!
  description: String
  instructions: [Instruction!]
  imageURL: String
  ingredients: [Measurement!]
  postedBy: User!
}

type Instruction {
  order: Int!
  step: String!
}

type Measurement {
  ingredient: Ingredient!
  quantity: Int!
  unit: String
}

type Ingredient {
  id: ID!
  name: String!
  recipes: [Recipe!]
}

type User {
  id: ID!
  username: String!
  createdRecipes: [Recipe!]
  favoriteRecipes: [Recipe!]
}
